"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _buildXML = _interopRequireDefault(require("./buildXML"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    // Allow subroutes to inherit sitemap.noindex
    normalizeRoute: function normalizeRoute(route) {
      var sitemap = route.sitemap || {};
      var parentSitemap = route.parent.sitemap || {};
      var noindex = (typeof sitemap.noindex !== 'undefined' ? sitemap.noindex : parentSitemap.noindex) || false;
      return _objectSpread(_objectSpread({}, route), {}, {
        sitemap: _objectSpread(_objectSpread({}, sitemap), {}, {
          noindex: noindex
        })
      });
    },
    afterExport: function afterExport(state) {
      if (!state.config.siteRoot) {
        console.log("Warning: react-static-plugin-sitemap - No 'siteRoot' is defined in 'static.config.js'. This is required to generate a sitemap.xml.");
        return;
      }

      return (0, _buildXML["default"])(state, options);
    }
  };
};

exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _glob = _interopRequireDefault(require("glob"));

var _reactStatic = require("react-static");

var _node = require("react-static/node");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = function _default(_ref) {
  var location = _ref.location,
      pathPrefix = _ref.pathPrefix,
      _ref$createRoute = _ref.createRoute,
      createRoute = _ref$createRoute === void 0 ? function (d) {
    return d;
  } : _ref$createRoute,
      _ref$extensions = _ref.extensions,
      extensions = _ref$extensions === void 0 ? [] : _ref$extensions;
  return {
    getRoutes: function () {
      var _getRoutes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(routes, state) {
        var config, stage, debug, globExtensions, pagesGlob, handle, watcher, pages, directoryRoutes;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                config = state.config, stage = state.stage, debug = state.debug;

                if (location) {
                  _context2.next = 3;
                  break;
                }

                throw new Error('react-static-plugin-source-filesystem: A valid `location` directory ' + 'is required to use this plugin');

              case 3:
                // Make a glob extension to get all pages with the set extensions from the pages directory
                // It should be a directory, not index.js inside that directory. This will
                // happen when using .resolve in some instances
                if (/index\.js$/.test(location)) {
                  location = _path["default"].dirname(location);
                } // Make a glob extension to get all pages with the set extensions from the
                // pages directory


                globExtensions = [].concat(_toConsumableArray(config.extensions), _toConsumableArray(extensions)).map(function (ext) {
                  return "".concat(ext.slice(1));
                }) // cut off the period of the extension
                .join(','); // join them for the glob string

                pagesGlob = _path["default"].join(location, '**', "*.{".concat(globExtensions, "}")); // Get the pages

                if (debug) {
                  console.log("Importing directory routes from: ".concat(pagesGlob));
                } else {
                  console.log('Importing routes from directory...');
                }

                handle = function handle(pages) {
                  return (// Turn each page into a route
                    Promise.all(pages.map(function (page) {
                      var originalPath = page; // Glob path will always have unix style path, convert to windows if necessary

                      var template = _path["default"].resolve(page); // Make sure the path is relative to the location root


                      var path = _path["default"].relative(location, template); // Cutoff the extension


                      path = _path["default"].join(_path["default"].dirname(path), _path["default"].basename(path, _path["default"].extname(path))); // Ensure paths are unix

                      path = path.split(_path["default"].sep).join(_path["default"].posix.sep); // Make sure it starts with a slash

                      path = path[0] === '/' ? path : "/".concat(path); // Turn `/index` paths into roots`

                      path = path.replace(/\/index$/, '/'); // Add the path prefix

                      path = pathPrefix ? (0, _reactStatic.pathJoin)(pathPrefix, path) : path; // Return the route

                      return createRoute({
                        path: path,
                        template: template,
                        originalPath: originalPath
                      });
                    }))
                  );
                }; // Trigger a getRoutes rebuild when items in
                // the directory change


                if (stage === 'dev') {
                  watcher = _chokidar["default"].watch(location, {
                    ignoreInitial: true
                  }).on('all', /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(type, file) {
                      var filename;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (['add', 'unlink'].includes(type)) {
                                _context.next = 2;
                                break;
                              }

                              return _context.abrupt("return");

                            case 2:
                              filename = _path["default"].basename(file);

                              if (!filename.startsWith('.')) {
                                _context.next = 5;
                                break;
                              }

                              return _context.abrupt("return");

                            case 5:
                              console.log("File ".concat(type === 'add' ? 'Added' : 'Removed', ": ").concat(_path["default"].relative(config.paths.ROOT, _path["default"].resolve(location, filename))));
                              watcher.close();
                              (0, _node.rebuildRoutes)();

                            case 8:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x3, _x4) {
                      return _ref2.apply(this, arguments);
                    };
                  }());
                }

                _context2.next = 11;
                return glob(pagesGlob);

              case 11:
                pages = _context2.sent;
                _context2.next = 14;
                return handle(pages);

              case 14:
                directoryRoutes = _context2.sent;
                return _context2.abrupt("return", [].concat(_toConsumableArray(routes), _toConsumableArray(directoryRoutes)));

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getRoutes(_x, _x2) {
        return _getRoutes.apply(this, arguments);
      }

      return getRoutes;
    }()
  };
};

exports["default"] = _default;

function glob(path) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new Promise(function (resolve, reject) {
    return (0, _glob["default"])(path, options, function (err, files) {
      if (err) {
        return reject(err);
      }

      resolve(files);
    });
  });
}
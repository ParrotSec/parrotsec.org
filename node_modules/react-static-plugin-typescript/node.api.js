"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _forkTsCheckerWebpackPlugin = _interopRequireDefault(require("fork-ts-checker-webpack-plugin"));

var _convertTsconfigPathsToWebpackAliases = _interopRequireDefault(require("convert-tsconfig-paths-to-webpack-aliases"));

var _typescript = require("typescript");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _default = function _default(options) {
  return {
    afterGetConfig: getReactStaticConfigExtender(),
    webpack: webpack(options)
  };
};

exports["default"] = _default;

function webpack(options) {
  var tsconfigLocation = (0, _typescript.findConfigFile)('./', _typescript.sys.fileExists);
  var tsconfigPath = tsconfigLocation ? _path["default"].resolve(tsconfigLocation) : tsconfigLocation;
  var parsedTsConfig = tsconfigPath ? (0, _typescript.parseConfigFileTextToJson)(tsconfigPath, (0, _fs.readFileSync)(tsconfigPath, 'utf8')) : {
    config: {}
  };
  var tsAliases = parsedTsConfig.config.compilerOptions && parsedTsConfig.config.compilerOptions.paths ? (0, _convertTsconfigPathsToWebpackAliases["default"])(parsedTsConfig.config) : {};
  return function (previousConfig, state) {
    var previousModuleConfig = previousConfig.module || {};
    var previousResolveConfig = previousConfig.resolve || {};
    var previousResolveExtensions = previousResolveConfig.extensions || [];
    var typescriptLoader = getTypeScriptLoader(state.defaultLoaders.jsLoader);
    var plugins = previousConfig.plugins || [];

    if ((options || {}).typeCheck !== false) {
      plugins.push(getTypecheckPlugin(tsconfigPath));
    }

    var loaders = Array.isArray(previousModuleConfig.rules) && previousModuleConfig.rules.length > 0 && Array.isArray(previousModuleConfig.rules[0].oneOf) ? _toConsumableArray(previousModuleConfig.rules[0].oneOf) : [state.defaultLoaders.jsLoader, state.defaultLoaders.jsLoaderExt, state.defaultLoaders.cssLoader, state.defaultLoaders.fileLoader];

    if (loaders.indexOf(state.defaultLoaders.jsLoader) !== -1) {
      // If the default Javascript loader is still present, replace it with the TypeScript loader:
      loaders[loaders.indexOf(state.defaultLoaders.jsLoader)] = typescriptLoader;
    } else {
      // Otherwise just add the TypeScript loader to the list of loaders, before the others:
      loaders.unshift(typescriptLoader);
    }

    return _objectSpread(_objectSpread({}, previousConfig), {}, {
      plugins: plugins,
      resolve: _objectSpread(_objectSpread({}, previousResolveConfig), {}, {
        extensions: previousResolveExtensions.concat(['.ts', '.tsx']),
        alias: _objectSpread(_objectSpread({}, previousResolveConfig.alias), tsAliases)
      }),
      module: _objectSpread(_objectSpread({}, previousModuleConfig), {}, {
        rules: [{
          oneOf: loaders
        }]
      })
    });
  };
}

function getReactStaticConfigExtender() {
  return function (state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      config: _objectSpread(_objectSpread({}, state.config), {}, {
        extensions: state.config.extensions.concat(['.ts', '.tsx'])
      })
    });
  };
}

function getTypeScriptLoader(jsLoader) {
  var jsLoaderBabelPresets = jsLoader.use[0].options.presets || [];

  var typescriptLoader = _objectSpread(_objectSpread({}, jsLoader), {}, {
    test: /\.(js|jsx|ts|tsx)$/,
    use: [_objectSpread(_objectSpread({}, jsLoader.use[0]), {}, {
      options: _objectSpread(_objectSpread({}, jsLoader.use[0].options), {}, {
        presets: jsLoaderBabelPresets.concat('@babel/preset-typescript')
      })
    })]
  });

  return typescriptLoader;
}

function getTypecheckPlugin(tsconfigPath) {
  return new _forkTsCheckerWebpackPlugin["default"]({
    async: false,
    typescript: {
      configFile: tsconfigPath
    }
  });
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = makeHeadWithMeta;
exports.InlineStyle = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../utils");

var _plugins = _interopRequireDefault(require("../plugins"));

//
// import packagejson from '../../../package.json'
// const { version } = packagejson
var REGEX_FOR_STYLE_TAG = /<style>|<\/style>/gi;

var InlineStyle = function InlineStyle(_ref) {
  var clientCss = _ref.clientCss;
  return /*#__PURE__*/_react["default"].createElement("style", {
    key: "clientCss",
    type: "text/css",
    dangerouslySetInnerHTML: {
      __html: clientCss.toString().replace(REGEX_FOR_STYLE_TAG, '')
    }
  });
};

exports.InlineStyle = InlineStyle;

function makeHeadWithMeta(_x) {
  return _makeHeadWithMeta.apply(this, arguments);
}

function _makeHeadWithMeta() {
  _makeHeadWithMeta = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(state) {
    var head, route, clientScripts, config, clientStyleSheets, clientCss, pluginHeads;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            head = state.head, route = state.route, clientScripts = state.clientScripts, config = state.config, clientStyleSheets = state.clientStyleSheets, clientCss = state.clientCss;
            _context.next = 3;
            return _plugins["default"].headElements([], state);

          case 3:
            pluginHeads = _context.sent;
            return _context.abrupt("return", function (_ref2) {
              var children = _ref2.children,
                  rest = (0, _objectWithoutProperties2["default"])(_ref2, ["children"]);
              var renderLinkCSS = !route.redirect && !config.inlineCss;
              var useHelmetTitle = head.title && head.title[0] && head.title[0].props.children !== '';

              var childrenArray = _react["default"].Children.toArray(children);

              if (useHelmetTitle) {
                head.title[0] = /*#__PURE__*/_react["default"].cloneElement(head.title[0], {
                  key: 'title'
                });
                childrenArray = childrenArray.filter(function (child) {
                  if (child.type === 'title') {
                    // Filter out the title of the Document in static.config.js
                    // if there is a helmet title on this route
                    return false;
                  }

                  return true;
                });
              }

              var childrenCSS = childrenArray.filter(function (child) {
                if (child.type === 'link' && child.props && child.props.rel === 'stylesheet') {
                  return true;
                }

                if (child.type === 'style') {
                  return true;
                }

                return false;
              });
              var childrenMeta = childrenArray.filter(function (child) {
                return child.type === 'meta';
              });
              var childrenJS = childrenArray.filter(function (child) {
                return child.type === 'script';
              });
              childrenArray = childrenArray.filter(function (child) {
                if (child.type === 'link' && child.props && child.props.rel === 'stylesheet') {
                  return false;
                }

                if (child.type === 'style') {
                  return false;
                }

                if (child.type === 'script') {
                  return false;
                }

                if (child.type === 'meta') {
                  return false;
                }

                return true;
              });
              return /*#__PURE__*/_react["default"].createElement("head", rest, /*#__PURE__*/_react["default"].createElement("meta", {
                name: "generator",
                content: "React Static"
              }), head.base, useHelmetTitle && head.title, childrenMeta, head.meta, childrenJS, !route.redirect && clientScripts.map(function (script) {
                return /*#__PURE__*/_react["default"].createElement("link", {
                  key: "clientScript_".concat(script),
                  rel: "preload",
                  as: "script",
                  href: (0, _utils.makePathAbsolute)((0, _utils.pathJoin)(process.env.REACT_STATIC_ASSETS_PATH, script))
                });
              }), childrenCSS, renderLinkCSS && clientStyleSheets.reduce(function (memo, styleSheet) {
                var href = (0, _utils.makePathAbsolute)((0, _utils.pathJoin)(process.env.REACT_STATIC_ASSETS_PATH, styleSheet));
                return [].concat((0, _toConsumableArray2["default"])(memo), [/*#__PURE__*/_react["default"].createElement("link", {
                  key: "clientStyleSheetPreload_".concat(styleSheet),
                  rel: "preload",
                  as: "style",
                  href: href
                }), /*#__PURE__*/_react["default"].createElement("link", {
                  key: "clientStyleSheet_".concat(styleSheet),
                  rel: "stylesheet",
                  href: href
                })]);
              }, []), head.link, head.noscript, head.script, config.inlineCss && /*#__PURE__*/_react["default"].createElement(InlineStyle, {
                clientCss: clientCss
              }), head.style, pluginHeads, childrenArray);
            });

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _makeHeadWithMeta.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
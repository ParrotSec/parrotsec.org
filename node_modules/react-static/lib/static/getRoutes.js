"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getRoutes;
exports.normalizeAllRoutes = normalizeAllRoutes;
exports.normalizeRoute = normalizeRoute;
exports.rebuildRoutes = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _utils = require("../utils");

var _plugins = _interopRequireDefault(require("./plugins"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var rebuildRoutes = function rebuildRoutes() {
  rebuildRoutes.current();
};

exports.rebuildRoutes = rebuildRoutes;

rebuildRoutes.current = function () {
  throw new Error('Routes cannot be rebuilt yet!');
};

function getRoutes(_x) {
  return _getRoutes.apply(this, arguments);
} // We recursively loop through the routes and their children and
// return an array of normalised routes.
// Original routes array [{ path: 'path', children: { path: 'to' } }]
// These can be returned as flat routes eg. [{ path: 'path' }, { path: 'path/to' }]
// Or they can be returned nested routes eg. [{ path: 'path', children: { path: 'path/to' } }]


function _getRoutes() {
  _getRoutes = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(state) {
    var callback,
        _args2 = arguments;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            callback = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : function (d) {
              return d;
            };
            rebuildRoutes.current = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
              var _state, silent, incremental, pluginRoutes, userRoutes, routes, _normalizeAllRoutes, allNormalizedRoutes, hasIndex, has404;

              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _state = state, silent = _state.silent, incremental = _state.incremental;
                      if (!silent) console.log('Building Routes...');
                      if (!silent) (0, _utils.time)(_chalk["default"].green("[\u2713] Routes Built"));
                      _context.next = 5;
                      return _plugins["default"].beforePrepareRoutes(state);

                    case 5:
                      state = _context.sent;
                      _context.next = 8;
                      return _plugins["default"].getRoutes([], state);

                    case 8:
                      pluginRoutes = _context.sent;
                      _context.next = 11;
                      return state.config.getRoutes(state);

                    case 11:
                      userRoutes = _context.sent;
                      routes = [].concat((0, _toConsumableArray2["default"])(pluginRoutes), (0, _toConsumableArray2["default"])(userRoutes)); // Flatten and normalize all of the routes

                      _normalizeAllRoutes = normalizeAllRoutes(routes, state), allNormalizedRoutes = _normalizeAllRoutes.routes, hasIndex = _normalizeAllRoutes.hasIndex, has404 = _normalizeAllRoutes.has404; // If no Index page was found, throw an error. This is required

                      if (!(!hasIndex && !incremental)) {
                        _context.next = 17;
                        break;
                      }

                      console.error('No index found!');
                      throw new Error('Could not find a route for the "index" page of your site! This is ' + 'required. Please create a page or specify a route and template ' + 'for this page.');

                    case 17:
                      console.log({
                        has404: has404
                      }); // If no 404 page was found, add one. This is required.

                      if (!has404 && !incremental) {
                        console.warn('Creating default 404 because none was found...');
                        allNormalizedRoutes.unshift({
                          path: _utils.PATH_404,
                          template: _path["default"].resolve(__dirname, _path["default"].join('..', 'browser', 'components', 'Default404'))
                        });
                      }

                      if (!silent) (0, _utils.timeEnd)(_chalk["default"].green("[\u2713] Routes Built"));
                      state = _objectSpread(_objectSpread({}, state), {}, {
                        routes: allNormalizedRoutes
                      });
                      _context.t0 = callback;
                      _context.next = 24;
                      return _plugins["default"].afterPrepareRoutes(state);

                    case 24:
                      _context.t1 = _context.sent;
                      return _context.abrupt("return", (0, _context.t0)(_context.t1));

                    case 26:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));
            return _context2.abrupt("return", rebuildRoutes.current());

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getRoutes.apply(this, arguments);
}

function normalizeAllRoutes(routes, state) {
  var routesByPath = {};
  var hasIndex;
  var has404; // This hook is set up beore the loop, since it could have expensive
  // overhead diving into plugins every time

  var pluginNormalizeRoute = _plugins["default"].normalizeRoute(state);

  var recurseRoute = function recurseRoute(route, parent) {
    // Normalize the route
    var normalizedRoute = normalizeRoute(route, parent, pluginNormalizeRoute); // we check an array of paths to see
    // if route path already existings

    var existingRoute = routesByPath[normalizedRoute.path]; // If the route has children, we do a depth-first recurse

    if (normalizedRoute.children) {
      normalizedRoute.children.forEach(function (childRoute) {
        return recurseRoute(childRoute, normalizedRoute);
      });
    } // If the route exists


    if (existingRoute) {
      // If it is meant to replace any routes before it
      if (!normalizedRoute.replace) {
        // If not replacing, we need to merge the two
        // routes together
        Object.assign(existingRoute, normalizedRoute); // Then make sure we're pointing to the exising route

        normalizedRoute = existingRoute;
      }
    }

    delete normalizedRoute.children; // Register the route by path

    routesByPath[normalizedRoute.path] = normalizedRoute; // Keep track of index and 404 routes existence

    if (normalizedRoute.path === '/') {
      hasIndex = true;
    }

    if ((0, _utils.is404Path)(normalizedRoute.path)) {
      has404 = true;
    }

    if (normalizedRoute.path.indexOf('\\') !== -1) {
      throw new Error('Plugins must return a normalized path for the `path` key of a route,' + ' which is a path with / and not \\.');
    }
  };

  routes.forEach(function (route) {
    return recurseRoute(route);
  });
  var normalizedRoutes = Object.values(routesByPath);
  return {
    routes: normalizedRoutes,
    hasIndex: hasIndex,
    has404: has404
  };
}

function normalizeRoute(route) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var pluginNormalizeRoute = arguments.length > 2 ? arguments[2] : undefined;
  var _parent$path = parent.path,
      parentPath = _parent$path === void 0 ? '/' : _parent$path;

  if (!route.path) {
    throw new Error("No path defined for route: ".concat(JSON.stringify(route)));
  }

  var routePath = (0, _utils.pathJoin)(parentPath, route.path);

  if (typeof route.noIndex !== 'undefined') {
    console.warn("Warning: Route ".concat(route.path, " is using 'noIndex'. Did you mean 'noindex'?"));
  }

  route.path = (0, _utils.getRoutePath)(routePath);
  route.parent = parent;
  route = pluginNormalizeRoute(route);
  delete route.parent;
  return route;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validatePlugin = exports["default"] = void 0;

var _utils = require("../utils");

var hooks = {
  afterGetConfig: function afterGetConfig(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterGetConfig');
    return (0, _utils.reduceHooks)(hooks, {
      sync: true
    })(state);
  },
  beforePrepareBrowserPlugins: function beforePrepareBrowserPlugins(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforePrepareBrowserPlugins');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  afterPrepareBrowserPlugins: function afterPrepareBrowserPlugins(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterPrepareBrowserPlugins');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  beforePrepareRoutes: function beforePrepareRoutes(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforePrepareRoutes');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  getRoutes: function getRoutes(routes, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'getRoutes');
    return (0, _utils.reduceHooks)(hooks)(routes, state);
  },
  normalizeRoute: function normalizeRoute(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'normalizeRoute');
    return function (route) {
      return (0, _utils.reduceHooks)(hooks, {
        sync: true
      })(route, state);
    };
  },
  afterPrepareRoutes: function afterPrepareRoutes(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterPrepareRoutes');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  webpack: function webpack(config, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'webpack');
    return (0, _utils.reduceHooks)(hooks, {
      sync: true
    })(config, state);
  },
  afterBundle: function afterBundle(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterBundle');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  afterDevServerStart: function afterDevServerStart(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterDevServerStart');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  routeInfo: function routeInfo(_routeInfo, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'routeInfo');
    return (0, _utils.reduceHooks)(hooks)(_routeInfo);
  },
  beforeRenderToElement: function beforeRenderToElement(Comp, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforeRenderToElement');
    return (0, _utils.reduceHooks)(hooks)(Comp, state);
  },
  beforeRenderToHtml: function beforeRenderToHtml(element, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforeRenderToHtml');
    return (0, _utils.reduceHooks)(hooks)(element, state);
  },
  htmlProps: function htmlProps(props, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'htmlProps');
    return (0, _utils.reduceHooks)(hooks)(props, state);
  },
  headElements: function headElements(elements, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'headElements');
    return (0, _utils.reduceHooks)(hooks)(elements, state);
  },
  beforeHtmlToDocument: function beforeHtmlToDocument(html, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforeHtmlToDocument');
    return (0, _utils.reduceHooks)(hooks)(html, state);
  },
  beforeDocumentToFile: function beforeDocumentToFile(html, state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'beforeDocumentToFile');
    return (0, _utils.reduceHooks)(hooks)(html, state);
  },
  afterExport: function afterExport(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'afterExport');
    return (0, _utils.reduceHooks)(hooks)(state);
  },
  plugins: function plugins(state) {
    var hooks = (0, _utils.getHooks)(state.plugins, 'plugins');
    return (0, _utils.reduceHooks)(hooks)(state);
  }
};
var _default = hooks;
exports["default"] = _default;

var validatePlugin = function validatePlugin(plugin) {
  var validHookKeys = Object.keys(hooks);
  var hookKeys = Object.keys(plugin.hooks);
  var badKeys = hookKeys.filter(function (key) {
    return !validHookKeys.includes(key);
  });

  if (badKeys.length) {
    throw new Error("Unknown plugin hooks: \"".concat(badKeys.join(', '), "\" found in plugin: ").concat(plugin.location));
  }
};

exports.validatePlugin = validatePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ChalkColor: true,
  findAvailablePort: true,
  time: true,
  timeEnd: true,
  debounce: true,
  escapeRegExp: true,
  progress: true
};
exports.time = time;
exports.timeEnd = timeEnd;
exports.debounce = debounce;
exports.escapeRegExp = escapeRegExp;
Object.defineProperty(exports, "progress", {
  enumerable: true,
  get: function get() {
    return _progress["default"];
  }
});
exports.findAvailablePort = exports.ChalkColor = void 0;

var _portfinder = _interopRequireDefault(require("portfinder"));

var _perf_hooks = require("perf_hooks");

var _utils = require("../browser/utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utils[key];
    }
  });
});

var _progress = _interopRequireDefault(require("./progress"));

//
// Export all shared utils
var ChalkColor = {
  yarn: '#2c8ebb',
  npm: '#cb3837'
};
exports.ChalkColor = ChalkColor;

var findAvailablePort = function findAvailablePort(start) {
  return _portfinder["default"].getPortPromise({
    port: start,
    stopPort: start + 1000
  });
};

exports.findAvailablePort = findAvailablePort;
var times = {};

function time(message) {
  times[message] = _perf_hooks.performance.now() / 1000;
}

function timeEnd(message) {
  if (times[message]) {
    var seconds = (_perf_hooks.performance.now() / 1000 - times[message]) * 10;
    times[message] = null;

    if (seconds < 0.1) {
      console.log("".concat(message));
      return;
    }

    if (seconds < 1) {
      seconds = Math.round(seconds * 10) / 10;
    } else {
      seconds = Math.round(seconds) / 10;
    }

    console.log("".concat(message, " (").concat(seconds, "s)"));
  }
}

function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(void 0, args);
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(void 0, args);
  };
}

var escapeReg = /[\\^$.*+?()[\]{}|]/g;

function escapeRegExp(str) {
  return str.replace(escapeReg, '\\$&');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDaGFsa0NvbG9yIiwieWFybiIsIm5wbSIsImZpbmRBdmFpbGFibGVQb3J0Iiwic3RhcnQiLCJQb3J0RmluZGVyIiwiZ2V0UG9ydFByb21pc2UiLCJwb3J0Iiwic3RvcFBvcnQiLCJ0aW1lcyIsInRpbWUiLCJtZXNzYWdlIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ0aW1lRW5kIiwic2Vjb25kcyIsImNvbnNvbGUiLCJsb2ciLCJNYXRoIiwicm91bmQiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImFyZ3MiLCJsYXRlciIsImNhbGxOb3ciLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZXNjYXBlUmVnIiwiZXNjYXBlUmVnRXhwIiwic3RyIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUlBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7O0FBTEE7QUFFQTtBQUlPLElBQU1BLFVBQVUsR0FBRztBQUN4QkMsRUFBQUEsSUFBSSxFQUFFLFNBRGtCO0FBRXhCQyxFQUFBQSxHQUFHLEVBQUU7QUFGbUIsQ0FBbkI7OztBQUtBLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQUMsS0FBSztBQUFBLFNBQ3BDQyx1QkFBV0MsY0FBWCxDQUEwQjtBQUN4QkMsSUFBQUEsSUFBSSxFQUFFSCxLQURrQjtBQUV4QkksSUFBQUEsUUFBUSxFQUFFSixLQUFLLEdBQUc7QUFGTSxHQUExQixDQURvQztBQUFBLENBQS9COzs7QUFNUCxJQUFNSyxLQUFLLEdBQUcsRUFBZDs7QUFDTyxTQUFTQyxJQUFULENBQWNDLE9BQWQsRUFBdUI7QUFDNUJGLEVBQUFBLEtBQUssQ0FBQ0UsT0FBRCxDQUFMLEdBQWlCQyx3QkFBWUMsR0FBWixLQUFvQixJQUFyQztBQUNEOztBQUNNLFNBQVNDLE9BQVQsQ0FBaUJILE9BQWpCLEVBQTBCO0FBQy9CLE1BQUlGLEtBQUssQ0FBQ0UsT0FBRCxDQUFULEVBQW9CO0FBQ2xCLFFBQUlJLE9BQU8sR0FBRyxDQUFDSCx3QkFBWUMsR0FBWixLQUFvQixJQUFwQixHQUEyQkosS0FBSyxDQUFDRSxPQUFELENBQWpDLElBQThDLEVBQTVEO0FBQ0FGLElBQUFBLEtBQUssQ0FBQ0UsT0FBRCxDQUFMLEdBQWlCLElBQWpCOztBQUVBLFFBQUlJLE9BQU8sR0FBRyxHQUFkLEVBQW1CO0FBQ2pCQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsV0FBZU4sT0FBZjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSUksT0FBTyxHQUFHLENBQWQsRUFBaUI7QUFDZkEsTUFBQUEsT0FBTyxHQUFHRyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osT0FBTyxHQUFHLEVBQXJCLElBQTJCLEVBQXJDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLE1BQUFBLE9BQU8sR0FBR0csSUFBSSxDQUFDQyxLQUFMLENBQVdKLE9BQVgsSUFBc0IsRUFBaEM7QUFDRDs7QUFDREMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLFdBQWVOLE9BQWYsZUFBMkJJLE9BQTNCO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTSyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsSUFBeEIsRUFBOEJDLFNBQTlCLEVBQXlDO0FBQzlDLE1BQUlDLE9BQUo7QUFDQSxTQUFPLFlBQWE7QUFBQSxzQ0FBVEMsSUFBUztBQUFUQSxNQUFBQSxJQUFTO0FBQUE7O0FBQ2xCLFFBQU1DLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQU07QUFDbEJGLE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0EsVUFBSSxDQUFDRCxTQUFMLEVBQWdCRixJQUFJLE1BQUosU0FBUUksSUFBUjtBQUNqQixLQUhEOztBQUlBLFFBQU1FLE9BQU8sR0FBR0osU0FBUyxJQUFJLENBQUNDLE9BQTlCO0FBQ0FJLElBQUFBLFlBQVksQ0FBQ0osT0FBRCxDQUFaO0FBQ0FBLElBQUFBLE9BQU8sR0FBR0ssVUFBVSxDQUFDSCxLQUFELEVBQVFKLElBQVIsQ0FBcEI7QUFDQSxRQUFJSyxPQUFKLEVBQWFOLElBQUksTUFBSixTQUFRSSxJQUFSO0FBQ2QsR0FURDtBQVVEOztBQUVELElBQU1LLFNBQVMsR0FBRyxxQkFBbEI7O0FBQ08sU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDaEMsU0FBT0EsR0FBRyxDQUFDQyxPQUFKLENBQVlILFNBQVosRUFBdUIsTUFBdkIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBvcnRGaW5kZXIgZnJvbSAncG9ydGZpbmRlcidcbmltcG9ydCB7IHBlcmZvcm1hbmNlIH0gZnJvbSAncGVyZl9ob29rcydcbi8vXG5cbi8vIEV4cG9ydCBhbGwgc2hhcmVkIHV0aWxzXG5leHBvcnQgKiBmcm9tICcuLi9icm93c2VyL3V0aWxzJ1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcydcbmV4cG9ydCBjb25zdCBDaGFsa0NvbG9yID0ge1xuICB5YXJuOiAnIzJjOGViYicsXG4gIG5wbTogJyNjYjM4MzcnLFxufVxuXG5leHBvcnQgY29uc3QgZmluZEF2YWlsYWJsZVBvcnQgPSBzdGFydCA9PlxuICBQb3J0RmluZGVyLmdldFBvcnRQcm9taXNlKHtcbiAgICBwb3J0OiBzdGFydCxcbiAgICBzdG9wUG9ydDogc3RhcnQgKyAxMDAwLFxuICB9KVxuXG5jb25zdCB0aW1lcyA9IHt9XG5leHBvcnQgZnVuY3Rpb24gdGltZShtZXNzYWdlKSB7XG4gIHRpbWVzW21lc3NhZ2VdID0gcGVyZm9ybWFuY2Uubm93KCkgLyAxMDAwXG59XG5leHBvcnQgZnVuY3Rpb24gdGltZUVuZChtZXNzYWdlKSB7XG4gIGlmICh0aW1lc1ttZXNzYWdlXSkge1xuICAgIGxldCBzZWNvbmRzID0gKHBlcmZvcm1hbmNlLm5vdygpIC8gMTAwMCAtIHRpbWVzW21lc3NhZ2VdKSAqIDEwXG4gICAgdGltZXNbbWVzc2FnZV0gPSBudWxsXG5cbiAgICBpZiAoc2Vjb25kcyA8IDAuMSkge1xuICAgICAgY29uc29sZS5sb2coYCR7bWVzc2FnZX1gKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHNlY29uZHMgPCAxKSB7XG4gICAgICBzZWNvbmRzID0gTWF0aC5yb3VuZChzZWNvbmRzICogMTApIC8gMTBcbiAgICB9IGVsc2Uge1xuICAgICAgc2Vjb25kcyA9IE1hdGgucm91bmQoc2Vjb25kcykgLyAxMFxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgJHttZXNzYWdlfSAoJHtzZWNvbmRzfXMpYClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIGxldCB0aW1lb3V0XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgdGltZW91dCA9IG51bGxcbiAgICAgIGlmICghaW1tZWRpYXRlKSBmdW5jKC4uLmFyZ3MpXG4gICAgfVxuICAgIGNvbnN0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXRcbiAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdClcbiAgICBpZiAoY2FsbE5vdykgZnVuYyguLi5hcmdzKVxuICB9XG59XG5cbmNvbnN0IGVzY2FwZVJlZyA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZ1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZVJlZywgJ1xcXFwkJicpXG59XG4iXX0=